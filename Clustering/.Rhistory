aux = clustering.asignaCluster(lista)
img = matrix(aux, nrow = 500)
image(img)
clustering.fcmcalculaU <- function( data , matrixC, matrixU, nclusters, norm , Entorno){
mat = clustering.calculaMatrisDistancia(data, matrixC, norm)
for (j in 1:dim(data)[1]) {
suma = 0
for (i in 1:nclusters ){
for (r in 1:nclusters ){
suma = suma + (mat[j,i]/mat[j,k])
}
matrixU[j,i] = 1/suma
}
}
return(matrixU)
}
clustering.feccalculaU <- function( data , matrixC, matrixU, nclusters, norm , Entorno){
mat = clustering.calculaMatrisDistancia(data, matrixC, norm)
for (j in 1:dim(data)[1]) {
suma = 0
for (i in 1:nclusters ){
for (r in 1:nclusters ){
suma = suma +(2.71828182^(mat[j,i]-mat[j,r]))^(1/(dim(data)[1]))
}
matrixU[j,i] = 1/suma
}
}
return(matrixU)
}
Algorithm.FCM <- function(data , matrixC , matrixU, error, iteraciones, norm, Entorno){
for (i in 1:iteraciones) {
print(paste("iteraciones",i))
matrixC = clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
matrixU = clustering.fcmcalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
}
#a <- list()
#a[[1]] <- matrixC
#a[[2]] <- matrixU
return(matrixU)
}
lista = Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
clustering.fcmcalculaU <- function( data , matrixC, matrixU, nclusters, norm , Entorno){
mat = clustering.calculaMatrisDistancia(data, matrixC, norm)
for (j in 1:dim(data)[1]) {
suma = 0
for (i in 1:nclusters ){
for (k in 1:nclusters ){
suma = suma + (mat[j,i]/mat[j,k])
}
matrixU[j,i] = 1/suma
}
}
return(matrixU)
}
lista = Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
aux = clustering.asignaCluster(lista)
aux
View(aux)
Algorithm.FCM <- function(data , matrixC , matrixU, error, iteraciones, norm, Entorno){
for (i in 1:iteraciones) {
print(paste("iteraciones",i))
matrixC = clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
print(matrixC)
matrixU = clustering.fcmcalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
}
#a <- list()
#a[[1]] <- matrixC
#a[[2]] <- matrixU
return(matrixU)
}
iteraciones = 10
lista = Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
lista
aux = clustering.asignaCluster(lista)
View(aux)
img = matrix(aux, nrow = 500)
image(img)
image(img)
Algorithm.FCM <- function(data , matrixC , matrixU, error, iteraciones, norm, Entorno){
for (i in 1:iteraciones) {
print(paste("iteraciones",i))
matrixC = clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
print(nclusters)
matrixU = clustering.fcmcalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
}
#a <- list()
#a[[1]] <- matrixC
#a[[2]] <- matrixU
return(matrixU)
}
lista = Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
lista
matrixU = Entorno.generaMatrizU(dimensiones , nclusters)
matrixC = Entorno.generaMatrizC(dimensiones , nclusters)
maatrixU
matrixU
Entorno.generaMatrizU <- function(dimensiones , nclusters){
mat = matrix( rexp(dimensiones[1]*nclusters, rate=.1), ncol = nclusters )
for(j in 1:dimensiones[1]){
suma = sum(mat[j,])
mat[j,] = mat[j,]/suma
}
return(mat)
#return(matrix(0, dimensiones[1], nclusters ))
}
matrixU = Entorno.generaMatrizU(dimensiones , nclusters)
View(matrixU)
matrixU
clustering.asignaCluster <- function(matrixU){
vector = matrix( 0, nrow = dim(matrixU)[1] )
for (j in (1:dim(matrixU)[1])) {
vector[j,1] = which(matrixU[j,] == max(matrixU[j,]))
}
img = matrix(vector, nrow = 500)
return(img)
}
aux = clustering.asignaCluster(matriXU)
aux = clustering.asignaCluster(matrixU)
image(aux)
Algorithm.FCM <- function(data , matrixC , matrixU, error, iteraciones, norm, Entorno){
for (i in 1:iteraciones) {
print(paste("iteraciones",i))
matrixC = clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
print(nclusters)
matrixU = clustering.fcmcalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
}
#a <- list()
#a[[1]] <- matrixC
#a[[2]] <- matrixU
return(matrixU)
}
lista = Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
aux = clustering.asignaCluster(matrixU)
image(aux)
aux = clustering.asignaCluster(lista)
image(aux)
data
View(matrixC)
lista
clustering.fcmcalculaU <- function( data , matrixC, matrixU, nclusters, norm , Entorno){
mat = clustering.calculaMatrisDistancia(data, matrixC, norm)
for (j in 1:dim(data)[1]) {
suma <- 0
for (i in 1:nclusters ){
for (k in 1:nclusters ){
suma <- suma + (mat[j,i]/mat[j,k])
}
matrixU[j,i] <- 1/suma
}
}
return(matrixU)
}
iteraciones = 3
lista = Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
lista
aux = clustering.asignaCluster(lista)
image(img)
matrixU
matrixC
matrixC = clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
matrixC
lista = clustering.fcmcalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
aux = clustering.asignaCluster(lista)
image(aux)
aux = clustering.asignaCluster(matrixU)
image(aux)
mat = clustering.calculaMatrisDistancia(data , matrixC, norm)
View(mat)
norm.euclidiana(data[1,],matrixC[1,])
data[1,]
matrixC[1,]
matrixU[,1]
sum(matrixU[,1])
sum(matrixU[1,])
matrixC[1,]/sum(matrixU[,1])
clustering.fcmcalculaC <- function( data , matrixC, matrixU, nclusters ){
tam = dim(data)
for(i in 1:nclusters ){
matrixC[i,] = matrix(0, 1, tam[2])
for(j in 1:tam[1]){
matrixC[i,] = matrixC[i,] + data[j,] * matrixU[j,i]
}
matrixC[i,] = matrixC[i,] / sum(matrixU[,1])
}
return(matrixC)
}
matrixC = clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
matrixC
matrixU = Entorno.generaMatrizU(dimensiones , nclusters)
matrixU
matrixC = clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
matrixC
lista = Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
aux = clustering.asignaCluster(lista)
image(aux)
matrixC = clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
matrixC
matrixU = clustering.fcmcalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
aux = clustering.asignaCluster(matrixU)
image(aux)
matrixU
matrixU[500,2] =0.8
matrixU
aux = clustering.asignaCluster(matrixU)
image(aux)
matrixU[250,2] =0.9
aux = clustering.asignaCluster(matrixU)
image(aux)
matrixU[130000:140000,2] =0.9
aux = clustering.asignaCluster(matrixU)
image(aux)
matrixU = Entorno.generaMatrizU(dimensiones , nclusters)
matrixU
aux = clustering.asignaCluster(matrixU)
image(aux)
matrixC = clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
matrixC
matrixU = Entorno.generaMatrizU(dimensiones , nclusters)
dimensiones = dim(data)
matrixU = Entorno.generaMatrizU(dimensiones , nclusters)
matrixU
sum(matrixU[500,])
matrixC = clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
matrixC
data * matrixU
data .* matrixU
data
data .* matrixU[,1]
data * matrixU[,1]
sum(matrixU[,1])
sum(matrixU[,2])
matrixC
lista = clustering.fcmcalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
aux = clustering.asignaCluster(lista)
image(aux)
matrixU - lista
sum((matrixU - lista)^2)
clustering.fcmcalculaU <- function( data , matrixC, matrixU, nclusters, norm , Entorno){
mat = clustering.calculaMatrisDistancia(data, matrixC, norm)
for (j in 1:dim(data)[1]) {
suma <- 0
for (i in 1:nclusters ){
for (k in 1:nclusters ){
suma <- suma + (mat[j,i]/mat[j,k])
}
matrixU[j,i] <- 1/suma
}
}
return(matrixU)
}
mat = clustering.calculaMatrisDistancia(data, matrixC, norm)
mat
mat[1,]
lista = clustering.fcmcalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
lista[1,]
clustering.fcmcalculaU <- function( data , matrixC, matrixU, nclusters, norm , Entorno){
mat = clustering.calculaMatrisDistancia(data, matrixC, norm)
for (j in 1:dim(data)[1]) {
for (i in 1:nclusters ){
suma <- 0
for (k in 1:nclusters ){
suma <- suma + (mat[j,i]/mat[j,k])
}
matrixU[j,i] <- 1/suma
}
}
return(matrixU)
}
lista = clustering.fcmcalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
lista[1,]
lista = Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
aux = clustering.asignaCluster(lista)
image(aux)
clustering.feccalculaU <- function( data , matrixC, matrixU, nclusters, norm , Entorno){
mat = clustering.calculaMatrisDistancia(data, matrixC, norm)
for (j in 1:dim(data)[1]) {
for (i in 1:nclusters ){
suma = 0
for (r in 1:nclusters ){
suma = suma +(2.71828182^(mat[j,i]-mat[j,r]))^(1/(dim(data)[1]))
}
matrixU[j,i] = 1/suma
}
}
return(matrixU)
}
lista = Algorithm.FEC(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
Algorithm.FEC <- function(data , matrixC , matrixU, error, iteraciones, norm, Entorno){
for (i in 1:iteraciones) {
print(paste("iteraciones",i))
matrixC = clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
matrixU = clustering.feccalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
}
#a <- list()
#a[[1]] <- matrixC
#a[[2]] <- matrixU
return(matrixU)
}
lista = Algorithm.FEC(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
aux = clustering.asignaCluster(lista)
lista
aux = clustering.asignaCluster(lista)
matrixC
matrixU = Entorno.generaMatrizU(dimensiones , nclusters)
(dim(data)[1])
mat[1]
mat[1,]
mat[1,1]-mat[1,2]
2.7182^mat[1,1]-mat[1,2]
(2.7182^mat[1,1]-mat[1,2])^(1/dim(data)[1])
(2.7182^mat[2,1]-mat[2,2])^(1/dim(data)[1])
lista = clustering.feccalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
lista
clustering.feccalculaU <- function( data , matrixC, matrixU, nclusters, norm , Entorno){
mat = clustering.calculaMatrisDistancia(data, matrixC, norm)
for (j in 1:dim(data)[1]) {
for (i in 1:nclusters ){
suma = 0
for (r in 1:nclusters ){
suma = suma +(2.71828182^(mat[j,i]-mat[j,r]))^(1/(dim(data)[1]))
}
matrixU[j,i] = 1/suma
}
}
return(matrixU)
}
Algorithm.FEC <- function(data , matrixC , matrixU, error, iteraciones, norm, Entorno){
for (i in 1:iteraciones) {
print(paste("iteraciones",i))
matrixC = clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
matrixU = clustering.feccalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
}
#a <- list()
#a[[1]] <- matrixC
#a[[2]] <- matrixU
return(matrixU)
}
lista = Algorithm.FEC(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
aux = clustering.asignaCluster(lista)
which(matrixU[1,] == max(matrixU[1,]))
which(lista[1,] == max(lista[1,]))
which(lista[2,] == max(lista[2,]))
lista
which(lista[500,] == max(lista[500,]))
aux = clustering.asignaCluster(lista)
clustering.asignaCluster <- function(matrixU){
vector = matrix( 0, nrow = dim(matrixU)[1] )
for (j in (1:dim(matrixU)[1])) {
vector[j,1] = which(matrixU[j,] == max(matrixU[j,]))[1]
}
img = matrix(vector, nrow = 500)
return(img)
}
aux = clustering.asignaCluster(lista)
image(aux)
a = image(aux)
a
plot(a)
image(aux)
png(filename="imagenseg.png")
image(aux)
dev.off()
m = matrix(runif(100),10,10)
par(mar=c(0, 0, 0, 0))
image(m, useRaster=TRUE, axes=FALSE)
image(aux)
png(filename="imagenseg.png")
par(mar=c(0, 0, 0, 0))
image(aux)
dev.off()
paste("imagenseg",1,".png")
paste("imagenseg",nchar(1),".png")
paste("A", 1:6, sep = "")
paste("A", 1, sep = "")
paste("A", 1,".png", sep = "")
("imagenseg",indice,".png",sep = "")
paste("imagenseg",indice,".png",sep = "")
paste("imagenseg",indice,".png",sep = "")
paste("imagenseg",3,".png",sep = "")
clustering.asignaCluster <- function(algName, indice, matrixU){
vector = matrix( 0, nrow = dim(matrixU)[1] )
for (j in (1:dim(matrixU)[1])) {
vector[j,1] = which(matrixU[j,] == max(matrixU[j,]))[1]
}
img = matrix(vector, nrow = 500)
png(paste(algName,indice,".png",sep = ""))
image(img)
dev.off()
return(img)
}
Algorithm.FEC <- function(data , matrixC , matrixU, error, iteraciones, norm, Entorno){
for (i in 1:iteraciones) {
print(paste("iteraciones",i))
matrixC = clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
matrixU = clustering.feccalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
}
#a <- list()
#a[[1]] <- matrixC
#a[[2]] <- matrixU
#aux = clustering.asignaCluster(lista)
return(matrixU)
}
Algorithm.FCM <- function(data , matrixC , matrixU, error, iteraciones, norm, Entorno){
for (i in 1:iteraciones) {
print(paste("iteraciones",i))
matrixC = clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
matrixU = clustering.fcmcalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
}
#a <- list()
#a[[1]] <- matrixC
#a[[2]] <- matrixU
return(matrixU)
}
lista = clustering.feccalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
abs(matrixU-lista)
maxabs(matrixU-lista)
max(abs(matrixU-lista))
matrixU <- lista
lista = clustering.feccalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
max(abs(matrixU-lista))
max(abs(matrixU-lista))
matrixU = duplicate(matrixU, shallow = FALSE)
a = 23
b<= a
b<- a
b
a
a = 25
b
a <- 30
b
matrixU = Entorno.generaMatrizU(dimensiones , nclusters)
matrixU
lista = clustering.feccalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
max(abs(matrixU-lista))
matrixU = clustering.feccalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
max(abs(matrixU-lista))
matrixU = clustering.feccalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
max(abs(matrixU-lista))
matrixU = Entorno.generaMatrizU(dimensiones , nclusters)
matrixU = clustering.feccalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
Algorithm.FEC <- function(data , matrixC , matrixU, error, iteraciones, norm, Entorno){
aux <- matrixU
for (i in 1:iteraciones) {
print(paste("iteraciones",i))
matrixC = clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
matrixU = clustering.feccalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
var = max(abs(matrixU-aux))
print(var)
aux <- matrixU
}
#a <- list()
#a[[1]] <- matrixC
#a[[2]] <- matrixU
#aux = clustering.asignaCluster(lista)
return(matrixU)
}
lista = Algorithm.FEC(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
matrixU = Entorno.generaMatrizU(dimensiones , nclusters)
lista = Algorithm.FEC(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
Algorithm.FCM <- function(data , matrixC , matrixU, error, iteraciones, norm, Entorno){
aux <- matrixU
for (i in 1:iteraciones) {
print(paste("iteraciones",i))
matrixC = clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
matrixU = clustering.fcmcalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
var = max(abs(matrixU-aux))
print(var)
aux <- matrixU
}
#a <- list()
#a[[1]] <- matrixC
#a[[2]] <- matrixU
return(matrixU)
}
lista = Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
clustering.asignaCluster("FCM",2,lista)
clustering.asignaCluster <- function(algName, indice, matrixU){
vector = matrix( 0, nrow = dim(matrixU)[1] )
for (j in (1:dim(matrixU)[1])) {
vector[j,1] = which(matrixU[j,] == max(matrixU[j,]))[1]
}
img = matrix(vector, nrow = 500)
png(paste(algName,indice,".png",sep = ""))
par(mar=c(0, 0, 0, 0))
image(img)
dev.off()
return(img)
}
clustering.asignaCluster("FCM",2,lista)
nclusters = 3
dimensiones = dim(data)
matrixC = Entorno.generaMatrizC(dimensiones , nclusters)
matrixU = Entorno.generaMatrizU(dimensiones , nclusters)
iteraciones = 6
error = 0.1
matrixU
lista = Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
clustering.asignaCluster("FCM",3,lista)
aux =clustering.asignaCluster("FCM",3,lista)
lista = Algorithm.FEC(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
aux =clustering.asignaCluster("FEC",3,lista)
aux =clustering.asignaCluster("FEC",3,lista)
aux
matrixC = Entorno.generaMatrizC(dimensiones , nclusters)
matrixU = Entorno.generaMatrizU(dimensiones , nclusters)
lista = Algorithm.FEC(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
aux =clustering.asignaCluster("FEC",3,lista)
matrixU = Entorno.generaMatrizU(dimensiones , nclusters)
iteraciones = 3
lista = Algorithm.FEC(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
aux =clustering.asignaCluster("FEC",3,lista)
