View(clustering.calculaMatrisDistancia)
FirstQuadrant <- setClass(
# Set the name for the class
"FirstQuadrant",
# Define the slots
slots = c(
x = "numeric",
y = "numeric"
),
# Set the default values for the slots. (optional)
prototype=list(
x = 0.0,
y = 0.0
),
# Make a function that can test to see if the data is consistent.
# This is not called if you have an initialize function defined!
validity=function(object)
{
if((object@x < 0) || (object@y < 0)) {
return("A negative number for one of the coordinates was given.")
}
return(TRUE)
}
)
# create a method to assign the value of a coordinate
setGeneric(name="setCoordinate",
def=function(theObject,xVal,yVal)
{
standardGeneric("setCoordinate")
}
)
setMethod(f="setCoordinate",
signature="FirstQuadrant",
definition=function(theObject, xVal, yVal)
{
theObject@x <- xVal
theObject@y <- yVal
return(theObject)
}
)
print(paste("iteraciones",i))
Algorithm.FCM <- function(data , matrixC , matrixU, error, iteraciones, norm, Entorno){
for (i in 1:iteraciones) {
print(paste("iteraciones",i))
}
}
Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
data <- matrix(rexp(80, rate=.1), nrow = 10, byrow = TRUE)
MatrixC = Entorno.generaMatrizC(dimensiones , nclusters)
MatrixU = Entorno.generaMatrizC(dimensiones , nclusters)
nclusters = 2
MatrixC = Entorno.generaMatrizC(dimensiones , nclusters)
MatrixU = Entorno.generaMatrizC(dimensiones , nclusters)
dimensiones = dim(data)
main <-function(){
data <- matrix(rexp(80, rate=.1), nrow = 10, byrow = TRUE)
nclusters = 2
dimensiones = dim(data)
MatrixC = Entorno.generaMatrizC(dimensiones , nclusters)
MatrixU = Entorno.generaMatrizC(dimensiones , nclusters)
}
main()
main <-function(Algorithm, norm, Entorno, clustering){
data <- matrix(rexp(80, rate=.1), nrow = 10, byrow = TRUE)
nclusters = 2
dimensiones = dim(data)
MatrixC = Entorno.generaMatrizC(dimensiones , nclusters)
MatrixU = Entorno.generaMatrizC(dimensiones , nclusters)
}
main(Algorithm, norm, Entorno, clustering)
data <- matrix(c(1:80), nrow = 10, byrow = TRUE)
data <- matrix(rexp(80, rate=.1), nrow = 10, byrow = TRUE)
norm.euclidiana <- function(a , b){
result <- sqrt( sum( ( a - b )^2 ))
return(result)
}
Entorno.generaMatrizC <- function(dimensiones , nclusters){
return(matrix(0, nclusters, dimensiones[2] ))
}
Entorno.generaMatrizU <- function(dimensiones , nclusters){
mat = matrix( rexp(dimensiones[1]*nclusters, rate=.1), ncol = nclusters )
for(j in 1:dimensiones[1]){
suma = sum(mat[j,])
mat[j,] = mat[j,]/suma
}
return(mat)
#return(matrix(0, dimensiones[1], nclusters ))
}
Entorno.calculaMatrisDistancia <- function(data , matrixC, norm){
filas = dim(data)[1]
columnas = dim(matrixC)[1]
mat = matrix(0, filas, columnas)
for (j in 1:filas) {
for (i in 1:columnas ){
mat[j,i] <- norm.euclidiana(data[j,], matrixC[i,])
}
}
return(mat)
}
clustering.fcmcalculaC <- function( data , matrixC, matrixU, nclusters ){
tam = dim(data)
for(i in 1:nclusters ){
matrixC[i,] = matrix(0, 1, tam[2])
for(j in 1:tam[1]){
matrixC[i,] = matrixC[i,] + data[j,] * matrixU[j,i]
}
}
return(matrixC)
}
clustering.feccalculaU <- function( data , matrixC, matrixU, nclusters, norm , Entorno){
mat = clustering.calculaMatrisDistancia(data, matrixC, norm)
for (j in 1:dim(data)[1]) {
suma = 0
for (i in 1:nclusters ){
for (r in 1:nclusters ){
suma = suma +1/(2.71828182^(mat[j,i]-mat[j,r]))
}
matrixU[j,i] = 1/suma
}
}
return(matrixU)
}
Algorithm.FCM <- function(data , matrixC , matrixU, error, iteraciones, norm, Entorno){
for (i in 1:iteraciones) {
print(paste("iteraciones",i))
}
}
main <-function(Algorithm, norm, Entorno, clustering){
data <- matrix(rexp(80, rate=.1), nrow = 10, byrow = TRUE)
nclusters = 2
dimensiones = dim(data)
MatrixC = Entorno.generaMatrizC(dimensiones , nclusters)
MatrixU = Entorno.generaMatrizC(dimensiones , nclusters)
}
main(Algorithm, norm, Entorno, clustering)
data <- matrix(c(1:80), nrow = 10, byrow = TRUE)
data <- matrix(rexp(80, rate=.1), nrow = 10, byrow = TRUE)
norm.euclidiana <- function(a , b){
result <- sqrt( sum( ( a - b )^2 ))
return(result)
}
Entorno.generaMatrizC <- function(dimensiones , nclusters){
return(matrix(0, nclusters, dimensiones[2] ))
}
Entorno.generaMatrizU <- function(dimensiones , nclusters){
mat = matrix( rexp(dimensiones[1]*nclusters, rate=.1), ncol = nclusters )
for(j in 1:dimensiones[1]){
suma = sum(mat[j,])
mat[j,] = mat[j,]/suma
}
return(mat)
#return(matrix(0, dimensiones[1], nclusters ))
}
Entorno.calculaMatrisDistancia <- function(data , matrixC, norm){
filas = dim(data)[1]
columnas = dim(matrixC)[1]
mat = matrix(0, filas, columnas)
for (j in 1:filas) {
for (i in 1:columnas ){
mat[j,i] <- norm.euclidiana(data[j,], matrixC[i,])
}
}
return(mat)
}
clustering.fcmcalculaC <- function( data , matrixC, matrixU, nclusters ){
tam = dim(data)
for(i in 1:nclusters ){
matrixC[i,] = matrix(0, 1, tam[2])
for(j in 1:tam[1]){
matrixC[i,] = matrixC[i,] + data[j,] * matrixU[j,i]
}
}
return(matrixC)
}
clustering.feccalculaU <- function( data , matrixC, matrixU, nclusters, norm , Entorno){
mat = clustering.calculaMatrisDistancia(data, matrixC, norm)
for (j in 1:dim(data)[1]) {
suma = 0
for (i in 1:nclusters ){
for (r in 1:nclusters ){
suma = suma +1/(2.71828182^(mat[j,i]-mat[j,r]))
}
matrixU[j,i] = 1/suma
}
}
return(matrixU)
}
Algorithm.FCM <- function(data , matrixC , matrixU, error, iteraciones, norm, Entorno){
for (i in 1:iteraciones) {
print(paste("iteraciones",i))
}
}
data <- matrix(rexp(80, rate=.1), nrow = 10, byrow = TRUE)
nclusters = 2
dimensiones = dim(data)
MatrixC = Entorno.generaMatrizC(dimensiones , nclusters)
MatrixU = Entorno.generaMatrizC(dimensiones , nclusters)
main <-function(Algorithm, norm, Entorno, clustering){
data <- matrix(rexp(80, rate=.1), nrow = 10, byrow = TRUE)
nclusters = 2
dimensiones = dim(data)
MatrixC = Entorno.generaMatrizC(dimensiones , nclusters)
MatrixU = Entorno.generaMatrizC(dimensiones , nclusters)
}
Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
data <- matrix(rexp(80, rate=.1), nrow = 10, byrow = TRUE)
nclusters = 2
dimensiones = dim(data)
MatrixC = Entorno.generaMatrizC(dimensiones , nclusters)
MatrixU = Entorno.generaMatrizC(dimensiones , nclusters)
iteraciones = 10
error = 0.1
Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
Algorithm.FCM <- function(data , matrixC , matrixU, error, iteraciones, norm, Entorno){
for (i in 1:iteraciones) {
print(paste("iteraciones",i))
matrixC = clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
matrixU = clustering.feccalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
}
return(matrixC, matrixU)
}
Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
MatrixC
Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
Algorithm.FCM <- function(data , matrixC , matrixU, error, iteraciones, norm, Entorno){
matC = matrixC
matU = matrixU
for (i in 1:iteraciones) {
print(paste("iteraciones",i))
matC = clustering.fcmcalculaC( data , matC, matU, nclusters )
matU = clustering.feccalculaU( data , matC, matU, nclusters, norm , Entorno)
}
return(matrixC, matrixU)
}
Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
MatrixU
data <- matrix(rexp(80, rate=.1), nrow = 10, byrow = TRUE)
nclusters = 2
dimensiones = dim(data)
matrixC = Entorno.generaMatrizC(dimensiones , nclusters)
matrixU = Entorno.generaMatrizC(dimensiones , nclusters)
iteraciones = 10
error = 0.1
Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
matrixU
matrixC = Entorno.generaMatrizC(dimensiones , nclusters)
matrixU = Entorno.generaMatrizU(dimensiones , nclusters)
matrixU
clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
data <- matrix(c(1:80), nrow = 10, byrow = TRUE)
data <- matrix(rexp(80, rate=.1), nrow = 10, byrow = TRUE)
norm.euclidiana <- function(a , b){
result <- sqrt( sum( ( a - b )^2 ))
return(result)
}
Entorno.generaMatrizC <- function(dimensiones , nclusters){
return(matrix(0, nclusters, dimensiones[2] ))
}
Entorno.generaMatrizU <- function(dimensiones , nclusters){
mat = matrix( rexp(dimensiones[1]*nclusters, rate=.1), ncol = nclusters )
for(j in 1:dimensiones[1]){
suma = sum(mat[j,])
mat[j,] = mat[j,]/suma
}
return(mat)
#return(matrix(0, dimensiones[1], nclusters ))
}
clustering.calculaMatrisDistancia <- function(data , matrixC, norm){
filas = dim(data)[1]
columnas = dim(matrixC)[1]
mat = matrix(0, filas, columnas)
for (j in 1:filas) {
for (i in 1:columnas ){
mat[j,i] <- norm.euclidiana(data[j,], matrixC[i,])
}
}
return(mat)
}
clustering.fcmcalculaC <- function( data , matrixC, matrixU, nclusters ){
tam = dim(data)
for(i in 1:nclusters ){
matrixC[i,] = matrix(0, 1, tam[2])
for(j in 1:tam[1]){
matrixC[i,] = matrixC[i,] + data[j,] * matrixU[j,i]
}
}
return(matrixC)
}
clustering.feccalculaU <- function( data , matrixC, matrixU, nclusters, norm , Entorno){
mat = clustering.calculaMatrisDistancia(data, matrixC, norm)
for (j in 1:dim(data)[1]) {
suma = 0
for (i in 1:nclusters ){
for (r in 1:nclusters ){
suma = suma +1/(2.71828182^(mat[j,i]-mat[j,r]))
}
matrixU[j,i] = 1/suma
}
}
return(matrixU)
}
Algorithm.FCM <- function(data , matrixC , matrixU, error, iteraciones, norm, Entorno){
for (i in 1:iteraciones) {
print(paste("iteraciones",i))
matrixC = clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
matrixU = clustering.feccalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
}
return(matrixC, matrixU)
}
data <- matrix(rexp(80, rate=.1), nrow = 10, byrow = TRUE)
nclusters = 2
dimensiones = dim(data)
matrixC = Entorno.generaMatrizC(dimensiones , nclusters)
matrixU = Entorno.generaMatrizU(dimensiones , nclusters)
iteraciones = 10
error = 0.1
main <-function(Algorithm, norm, Entorno, clustering){
data <- matrix(rexp(80, rate=.1), nrow = 10, byrow = TRUE)
nclusters = 2
dimensiones = dim(data)
MatrixC = Entorno.generaMatrizC(dimensiones , nclusters)
MatrixU = Entorno.generaMatrizC(dimensiones , nclusters)
}
Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
a = [matrixC,matrixU]
a = (matrixC,matrixU)
a <- list()
a[[1]] <- matrixC
a[[2]] <- matrixU
a
Algorithm.FCM <- function(data , matrixC , matrixU, error, iteraciones, norm, Entorno){
for (i in 1:iteraciones) {
print(paste("iteraciones",i))
matrixC = clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
matrixU = clustering.feccalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
}
a <- list()
a[[1]] <- matrixC
a[[2]] <- matrixU
return(a)
}
Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
#data <- matrix(c(1:80), nrow = 10, byrow = TRUE)
data <- matrix(rexp(800, rate=.1), nrow = 10, byrow = TRUE)
norm.euclidiana <- function(a , b){
result <- sqrt( sum( ( a - b )^2 ))
return(result)
}
Entorno.generaMatrizC <- function(dimensiones , nclusters){
return(matrix(0, nclusters, dimensiones[2] ))
}
Entorno.generaMatrizU <- function(dimensiones , nclusters){
mat = matrix( rexp(dimensiones[1]*nclusters, rate=.1), ncol = nclusters )
for(j in 1:dimensiones[1]){
suma = sum(mat[j,])
mat[j,] = mat[j,]/suma
}
return(mat)
#return(matrix(0, dimensiones[1], nclusters ))
}
clustering.calculaMatrisDistancia <- function(data , matrixC, norm){
filas = dim(data)[1]
columnas = dim(matrixC)[1]
mat = matrix(0, filas, columnas)
for (j in 1:filas) {
for (i in 1:columnas ){
mat[j,i] <- norm.euclidiana(data[j,], matrixC[i,])
}
}
return(mat)
}
clustering.fcmcalculaC <- function( data , matrixC, matrixU, nclusters ){
tam = dim(data)
for(i in 1:nclusters ){
matrixC[i,] = matrix(0, 1, tam[2])
for(j in 1:tam[1]){
matrixC[i,] = matrixC[i,] + data[j,] * matrixU[j,i]
}
}
return(matrixC)
}
clustering.feccalculaU <- function( data , matrixC, matrixU, nclusters, norm , Entorno){
mat = clustering.calculaMatrisDistancia(data, matrixC, norm)
for (j in 1:dim(data)[1]) {
suma = 0
for (i in 1:nclusters ){
for (r in 1:nclusters ){
suma = suma +1/(2.71828182^(mat[j,i]-mat[j,r]))
}
matrixU[j,i] = 1/suma
}
}
return(matrixU)
}
Algorithm.FCM <- function(data , matrixC , matrixU, error, iteraciones, norm, Entorno){
for (i in 1:iteraciones) {
print(paste("iteraciones",i))
matrixC = clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
matrixU = clustering.feccalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
}
a <- list()
a[[1]] <- matrixC
a[[2]] <- matrixU
return(a)
}
data <- matrix(rexp(80, rate=.1), nrow = 10, byrow = TRUE)
nclusters = 2
dimensiones = dim(data)
matrixC = Entorno.generaMatrizC(dimensiones , nclusters)
matrixU = Entorno.generaMatrizU(dimensiones , nclusters)
iteraciones = 10
error = 0.1
Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
data
#data <- matrix(c(1:80), nrow = 10, byrow = TRUE)
data <- matrix(rexp(800, rate=.1), nrow = 100, byrow = TRUE)
data
Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
matrixU
#data <- matrix(c(1:80), nrow = 10, byrow = TRUE)
norm.euclidiana <- function(a , b){
result <- sqrt( sum( ( a - b )^2 ))
return(result)
}
Entorno.generaMatrizC <- function(dimensiones , nclusters){
return(matrix(0, nclusters, dimensiones[2] ))
}
Entorno.generaMatrizU <- function(dimensiones , nclusters){
mat = matrix( rexp(dimensiones[1]*nclusters, rate=.1), ncol = nclusters )
for(j in 1:dimensiones[1]){
suma = sum(mat[j,])
mat[j,] = mat[j,]/suma
}
return(mat)
#return(matrix(0, dimensiones[1], nclusters ))
}
clustering.calculaMatrisDistancia <- function(data , matrixC, norm){
filas = dim(data)[1]
columnas = dim(matrixC)[1]
mat = matrix(0, filas, columnas)
for (j in 1:filas) {
for (i in 1:columnas ){
mat[j,i] <- norm.euclidiana(data[j,], matrixC[i,])
}
}
return(mat)
}
clustering.fcmcalculaC <- function( data , matrixC, matrixU, nclusters ){
tam = dim(data)
for(i in 1:nclusters ){
matrixC[i,] = matrix(0, 1, tam[2])
for(j in 1:tam[1]){
matrixC[i,] = matrixC[i,] + data[j,] * matrixU[j,i]
}
}
return(matrixC)
}
clustering.feccalculaU <- function( data , matrixC, matrixU, nclusters, norm , Entorno){
mat = clustering.calculaMatrisDistancia(data, matrixC, norm)
for (j in 1:dim(data)[1]) {
suma = 0
for (i in 1:nclusters ){
for (r in 1:nclusters ){
suma = suma +1/(2.71828182^(mat[j,i]-mat[j,r]))
}
matrixU[j,i] = 1/suma
}
}
return(matrixU)
}
Algorithm.FCM <- function(data , matrixC , matrixU, error, iteraciones, norm, Entorno){
for (i in 1:iteraciones) {
print(paste("iteraciones",i))
matrixC = clustering.fcmcalculaC( data , matrixC, matrixU, nclusters )
matrixU = clustering.feccalculaU( data , matrixC, matrixU, nclusters, norm , Entorno)
}
a <- list()
a[[1]] <- matrixC
a[[2]] <- matrixU
return(a)
}
#data <- matrix(rexp(80, rate=.1), nrow = 10, byrow = TRUE)
data <- matrix(rexp(800, rate=.1), nrow = 100, byrow = TRUE)
nclusters = 2
dimensiones = dim(data)
matrixC = Entorno.generaMatrizC(dimensiones , nclusters)
matrixU = Entorno.generaMatrizU(dimensiones , nclusters)
iteraciones = 10
error = 0.1
Algorithm.FCM(data , matrixC , matrixU, error, iteraciones, norm, Entorno)
library(png)
install.packages("png")
img<-readPNG("C:/Users/luism/OneDrive/Escritorio/descarga.png")
library(png)
img<-readPNG("C:/Users/luism/OneDrive/Escritorio/descarga.png")
img<-readPNG("C:/Users/luism/OneDrive/Escritorio/descarga.jpg")
img<-readPNG("C:/Users/luism/OneDrive/Escritorio/lena.png")
img
dim(img)
img[1,1,1]
img[1,1,2]
img[1,1,]
